# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# sudo amplify api gql-compile && amplify codegen

# 如果重命名table，会把之前的数据全部都删除的

type UserInfo
  @model(subscriptions: null)
  @auth(rules: [{ allow: groups, groups: ["admin"] }]) {
  id: ID!
  email: AWSEmail
  userName: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Profile
  @model(subscriptions: null)
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["admin"] }]) {
  id: ID!
  name: String
  companyName: String
  address: String
  fax: String
  idPassport: String
  title: String
  phone: String
  phone2: String
  email: AWSEmail
  owner: ID!
}

type HomePageCarouse
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  title: String
  titleEng: String
  sourceUrl: AWSURL
  description: String
  descriptionEng: String
  sourceType: SourceType!
  auction: Auction! @hasOne
}

enum SourceType {
  image
  video
}

type Category
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  categoryName: String!
  auctionItems: [AuctionItem] @hasMany
}

type Auction
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID! # uuid
  active: Boolean!
  company: String
  description: String
  auctionStartDate: AWSDateTime
  auctionEndDate: AWSDateTime
  lot: [Lot] @hasMany
  bidHistories: [BidHistory] @hasMany
  bidIncrementPriceList: [Int]
  auctionUserLimitations: [AuctionUserLimitation] @hasMany
  auctionUserNumbers: [AuctionUserNumber] @hasMany
}

enum AuctionStatus {
  ComingSoon
  InProgress
  Finished
  Canceled
}

type MyFavorite
  @model(subscriptions: null)
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["admin"] }]) {
  id: ID! # uuid
  lot: Lot @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID!
}

type Lot
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID! # uuid
  lotOrder: Int! #拍卖顺序
  startingPrice: Int
  estimatedPriceMin: Int
  estimatedPriceMax: Int
  lotStatus: LotStatus!

  auctionLotId: ID!
    @index(
      name: "lotSortByLotOrder"
      queryField: "lotSortByLotOrder"
      sortKeyFields: ["lotOrder"]
    )
    @index(name: "byAuction", sortKeyFields: ["lotOrder"])
  auction: Auction! @belongsTo(fields: ["auctionLotId"])

  auctionItem: AuctionItem! @hasOne

  bidHistories: [BidHistory] @hasMany
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime

  myFavorites: [MyFavorite] @hasMany
}
# 东西会不会流拍，流拍的会不会再拍

enum LotStatus {
  ComingSoon
  InProgress
  Finished
  Canceled
  Pause
}

type AuctionItem
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID! # uuid
  name: String
  title: String
  description: String
  titleEng: String
  descriptionEng: String
  category: Category! @belongsTo
  imgUrls: [AWSURL]
  condition: String
  provenance: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}

type BidHistory
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: owner, operations: [create, read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  bidPrice: Int!
  auctionBidHistoriesId: ID!
    @index(name: "byAuction", sortKeyFields: ["createdAt"])
    @index(
      name: "BidHistorySortByCreatedAt"
      queryField: "BidHistorySortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  auction: Auction! @belongsTo(fields: ["auctionBidHistoriesId"])

  lot: Lot! @belongsTo
  userNumber: Int!
  bidHistoryStatus: BidHistoryStatus
    @auth(
      rules: [
        { allow: public, operations: [read], provider: iam }
        { allow: groups, operations: [read], groups: ["anyone"] }
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
      ]
    )
  bidForm: BidForm
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID!
}

enum BidForm {
  Room
  Internet
  Phone
}

enum BidHistoryStatus {
  Start
  Success
  FirstCall
  SecondCall
  AuctionEnd
}

# 每个客户在每次auction里面 能成交的总数
type AuctionUserLimitation
  @model
  @auth(
    rules: [
      # { allow: public, operations: [read], provider: iam }
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  maxUserBidPrice: Int!
  limitStatus: LimitStatus!
  auction: Auction! @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID!
}
type MySucceedBid
  @model
  @auth(
    rules: [
      # { allow: public, operations: [read], provider: iam }
      { allow: owner, operations: [read] }
      { allow: groups, operations: [read], groups: ["anyone"] } #这个要改
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!

  auction: Auction! @hasOne
  bidHistory: BidHistory! @hasOne
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID!
}

enum LimitStatus {
  Unlimited
  Limited
  Undefined
}

type AuctionUserNumber  #别人看不到，自己能看到，但是公开的能看到但是并不知道是谁的
  @model
  @auth(
    rules: [
      #{ allow: public, operations: [read], provider: iam }
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  number: Int!
  auction: Auction! @belongsTo
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID!
}
