# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# sudo amplify api gql-compile && amplify codegen

type Profile
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["admin"] }]) {
  id: ID!
  name: String
  companyName: String
  address: String
  fax: String
  idPassport: String
  title: String
  phone: String
  phone2: String
  email: String
}

type Category
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  categoryName: String!
  auctionItems: [AuctionItem] @hasMany(indexName: "byCategory", fields: ["id"])
}

type Auctions
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID! # uuid
  company: String
  description: String
  auctionStartDate: AWSDateTime
  auctionEndDate: AWSDateTime
  lots: [Lots] @hasMany(indexName: "byAuctions", fields: ["id"])
  bidItemHistories: [BidItemHistory]
    @hasMany(indexName: "byAuctions", fields: ["id"])
  bidIncrementPriceList: [Int]
  auctionUserLimitations: [AuctionUserLimitation]
    @hasMany(indexName: "byAuctions", fields: ["id"])

  auctionUserNumbers: [AuctionUserNumber]
    @hasMany(indexName: "byAuctions", fields: ["id"])
}

enum AuctionStatus {
  ComingSoon
  InProgress
  Finished
  Canceled
}

type MyCollection
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["admin"] }]) {
  id: ID! # uuid
  lotsID: ID! @index(name: "myCollectionByLots", sortKeyFields: ["createdAt"])
  lots: Lots! @hasOne(fields: ["lotsID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}

type Lots
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID! # uuid
  lot: Int #拍卖顺序
  startingPrice: Int
  estimatedPriceMin: Int
  estimatedPriceMax: Int
  lotsStatus: LotsStatus!
  auctionsID: ID!
    @index(
      name: "lotsSortByLot"
      queryField: "lotsSortByLot"
      sortKeyFields: ["lot"]
    )
    @index(name: "byAuctions", sortKeyFields: ["lot"])
  auctions: Auctions! @belongsTo(fields: ["auctionsID"])
  auctionItemID: ID!
  auctionItem: AuctionItem! @hasOne(fields: ["auctionItemID"])

  bidItemHistories: [BidItemHistory]
    @hasMany(indexName: "byLots", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}
# 东西会不会流拍，流拍的会不会再拍

enum LotsStatus {
  ComingSoon
  InProgress
  Finished
  Canceled
  Pause
}

type AuctionItem
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID! # uuid
  name: String
  title: String
  description: String
  categoryID: ID! @index(name: "byCategory", sortKeyFields: ["createdAt"])
  category: Category! @belongsTo(fields: ["categoryID"])
  imgUrl: String
  imgUrls: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BidItemHistory
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: owner, operations: [create, read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  bidPrice: String!
  auctionsID: ID!
    @index(name: "byAuctions", sortKeyFields: ["createdAt"])
    @index(
      name: "BidItemHistorySortByCreatedAt"
      queryField: "BidItemHistorySortByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  auctions: Auctions! @belongsTo(fields: ["auctionsID"])

  lotsID: ID! @index(name: "byLots", sortKeyFields: ["createdAt"])
  lots: Lots! @belongsTo(fields: ["lotsID"])
  userNumber: Int!
  bidItemHistoryStatus: BidItemHistoryStatus
    @auth(
      rules: [
        { allow: public, operations: [read], provider: iam }
        { allow: groups, operations: [read], groups: ["anyone"] }
        { allow: owner, operations: [read] }
        { allow: groups, groups: ["admin"] }
      ]
    )
  bidForm: BidForm

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID
}

enum BidForm {
  Room
  Internet
  Phone
}

enum BidItemHistoryStatus {
  Start
  Success
  FirstCall
  SecondCall
  AuctionEnd
}

# 每个客户在每次auction里面 能成交的总数
type AuctionUserLimitation
  @model
  @auth(
    rules: [
      # { allow: public, operations: [read], provider: iam }
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  maxUserBidPrice: Int!
  limitStatus: LimitStatus!
  auctionsID: ID! @index(name: "byAuctions", sortKeyFields: ["createdAt"])
  auctions: Auctions! @belongsTo(fields: ["auctionsID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID
}
type MySucceedBid
  @model
  @auth(
    rules: [
      # { allow: public, operations: [read], provider: iam }
      { allow: owner, operations: [read] }
      { allow: groups, operations: [read], groups: ["anyone"] }
      { allow: groups, groups: ["admin", "staff"] }
    ]
  ) {
  id: ID!
  auctionsID: ID!
  auctions: Auctions! @hasOne(fields: ["auctionsID"])
  bidItemHistoryID: ID!
  bidItemHistory: BidItemHistory! @hasOne(fields: ["bidItemHistoryID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID
}

enum LimitStatus {
  Unlimited
  Limited
  Undefined
}

type AuctionUserNumber  #别人看不到，自己能看到，但是公开的能看到但是并不知道是谁的
  @model
  @auth(
    rules: [
      #{ allow: public, operations: [read], provider: iam }
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  number: Int!
  auctionsID: ID! @index(name: "byAuctions", sortKeyFields: ["createdAt"])
  auctions: Auctions! @belongsTo(fields: ["auctionsID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  owner: ID
}
